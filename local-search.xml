<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Clion连接到远程开发环境</title>
    <link href="/2023/07/11/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/07/11/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于C&#x2F;C++的开发，生产环境往往都离不开Linux<br>本文章将会以Ubuntu为例，在Windows系统下实现Clion远程连接Ubuntu</p><h1 id="1-Ubuntu环境的准备"><a href="#1-Ubuntu环境的准备" class="headerlink" title="1.Ubuntu环境的准备"></a>1.Ubuntu环境的准备</h1><p>Clion可以通过ssh连接Linux环境，所以我们需要在服务器搭建好ssh环境</p><blockquote><p>docker可以通过暴露ssh服务端口实现连接</p></blockquote><h2 id="1-1-开启docker"><a href="#1-1-开启docker" class="headerlink" title="1.1 开启docker"></a>1.1 开启docker</h2><p>如果是想要远程连接到docker容器，则需要容器暴露ssh服务端口</p><blockquote><p>ssh服务默认的运行端口是Linux的22端口，但可以更改，下文会提到</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 新建容器</span><br>docker run -it --name=&lt;容器名称&gt; -p &lt;暴露端口&gt;<br><br><span class="hljs-comment"># 具体例子</span><br>docker run -it --name=ubuntu-cpp -p 9999:22 ubuntu:22.04<br></code></pre></td></tr></table></figure><blockquote><p>对于-p参数，其格式为 <code>主机(宿主)端口:容器端口</code></p></blockquote><h2 id="1-2-安装启动ssh服务"><a href="#1-2-安装启动ssh服务" class="headerlink" title="1.2 安装启动ssh服务"></a>1.2 安装启动ssh服务</h2><ul><li><p>首先，开启ssh服务需要下载openssh-server包</p><blockquote><p>通过apt下载之前，建议换国内源</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt update<br>apt install -y openssh-server passwd<br></code></pre></td></tr></table></figure></li><li><p>启动ssh服务，并将其设为开机自启</p><ul><li>对于非docker，可以手机用systemctl  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start sshd<br>systemctl <span class="hljs-built_in">enable</span> sshd<br></code></pre></td></tr></table></figure></li><li>对于docker容器，<code>systemctl</code>命令可能无法使用，就需要用到<code>service</code>命令  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开启ssh服务</span><br>service ssh start<br><span class="hljs-comment"># 通过写入/etc/profile.d/目录实现开机自启</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;service ssh start&quot;</span> &gt; /etc/profile.d/ssh.sh<br></code></pre></td></tr></table></figure></li></ul></li><li><p>查看ssh服务的状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 非docker</span><br>systemctl status sshd<br><br><span class="hljs-comment"># docker</span><br>service ssh status<br></code></pre></td></tr></table></figure></li><li><p>docker容器还需要初始化用户密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 如果使用root用户连接，则需要修改root用户的密码</span><br><span class="hljs-comment"># 用什么用户连接就修改什么用户的密码</span><br>passwd root<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-3-配置ssh服务"><a href="#1-3-配置ssh服务" class="headerlink" title="1.3 配置ssh服务"></a>1.3 配置ssh服务</h2><blockquote><p>ssh服务的配置文件在&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 备份配置文件</span><br><span class="hljs-built_in">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak<br><span class="hljs-comment"># 修改配置文件</span><br>vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><ul><li>下面是一些ssh配置文件中的参数及其解释<blockquote><p>对于ssh的配置文件可以按需修改，不需要可以不用修改</p></blockquote></li></ul><table><thead><tr><th align="center">参数</th><th>解释</th></tr></thead><tbody><tr><td align="center">Port</td><td>ssh服务端口，默认为<code>22</code></td></tr><tr><td align="center">ListenAddress</td><td>ssh服务的监听IP，默认为<code>0.0.0.0</code></td></tr><tr><td align="center">MaxAuthTries</td><td>最大密码尝试数，默认为<code>6</code></td></tr><tr><td align="center">MaxSessions</td><td>最大终端数，默认为<code>10</code></td></tr><tr><td align="center">PermitEmptyPasswords</td><td>允许空密码登录，默认为<code>no</code></td></tr><tr><td align="center">PermitRootLogin</td><td>允许root用户登录</td></tr></tbody></table><ul><li>注意！在配置文件末尾添加一行<code>PermitRootLogin yes</code>，表示可以通过root用户登录</li></ul><blockquote><p>修改完配置文件需要重启ssh服务，配置才会生效</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 非docker</span><br>systemctl restart sshd<br><br><span class="hljs-comment"># docker</span><br>service ssh restart<br></code></pre></td></tr></table></figure><h1 id="2-Clion连接"><a href="#2-Clion连接" class="headerlink" title="2.Clion连接"></a>2.Clion连接</h1><p>在前面把环境搭建好了，就可以使用Clion进行远程开发了</p><h2 id="2-1-配置Toolchains-工具链"><a href="#2-1-配置Toolchains-工具链" class="headerlink" title="2.1 配置Toolchains(工具链)"></a>2.1 配置Toolchains(工具链)</h2><ul><li>打开 <code>文件</code> -&gt; <code>⚙️设置</code> -&gt; <code>构建、执行、部署</code> -&gt; <code>工具链</code></li></ul><p><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E9%93%BE1.png"></p><ul><li>点击 <code>凭据</code> 后面的 <code>⚙</code></li></ul><p><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E9%93%BE2.png"></p><ul><li>填写主机IP，端口和登录用户的账号密码<blockquote><p>请注意，如果是docker，填写的端口为容器映射到主机的端口</p></blockquote></li></ul><p><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E9%93%BE3.png"></p><ul><li>我这里用的是本地docker，连接成功✅</li></ul><p><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E9%93%BE4.png"></p><br><h2 id="2-2-使用Toolchains-工具链"><a href="#2-2-使用Toolchains-工具链" class="headerlink" title="2.2 使用Toolchains(工具链)"></a>2.2 使用Toolchains(工具链)</h2><ul><li><p>打开 <code>文件</code> -&gt; <code>⚙️设置</code> -&gt; <code>构建、执行、部署</code> -&gt; <code>CMake</code></p></li><li><p>添加配置，工具链使用刚才配置好的</p></li></ul><p><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E9%93%BE1.png"></p><ul><li>切换运行环境</li></ul><p><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E9%93%BE2.png"></p><ul><li>运行一段代码，发现已经连接成功<blockquote><p>在运行代码的时候，会从本地同步一份代码文件到Linux中编译运行，再把结果返回到本地<br><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p></blockquote></li></ul><br><h1 id="3-通过SFTP同步代码"><a href="#3-通过SFTP同步代码" class="headerlink" title="3. 通过SFTP同步代码"></a>3. 通过SFTP同步代码</h1><p>通过配置SFTP，可以使本地代码同步到远程开发环境</p><ul><li><p>打开 <code>文件</code> -&gt; <code>⚙️设置</code> -&gt; <code>构建、执行、部署</code> -&gt; <code>部署</code></p></li><li><p>添加SFTP<br><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/SFTP1.png"></p></li></ul><br><ul><li>填写配置<blockquote><p>注意，此时在<code>部署</code>中还有一个SFTP，这个SFTP是与远程编译有关的的</p></blockquote></li></ul><p><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/SFTP2.png"></p><ul><li>打开 <code>文件</code> -&gt; <code>⚙️设置</code> -&gt; <code>构建、执行、部署</code> -&gt; <code>部署</code> -&gt; <code>选项</code> </li><li>设置自动同步，将<code>从不</code>改为<code>始终</code></li></ul><p><img src="/../img/post/Clion%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/SFTP3.png"></p><br><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>至此就配置完成了，可以快乐的在Clion写代码了😉</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
